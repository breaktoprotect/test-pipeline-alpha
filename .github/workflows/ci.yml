# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  vuln-scan:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Map a step output to a job output
    outputs:
      trivy_results: ${{ steps.trivy-results.outputs.data }}
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Trivy Config scan for Dockerfiles
      - name: Run Trivy vulnerability scanner in config mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'Dockerfile'
          trivy-config: trivy.yaml
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy Image scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'config'
      - id: trivy-results
        name: Save contents of trivy-results.sarif 
        run:
          results=$(cat trivy-results.sarif)  
          echo "data=$results" >> $GITHUB_OUTPUT
        
  jira-reporting:
    # Jira Vuln Management Reporting
    needs: vuln-scan
    uses: breaktoprotect/jira-vuln-mgmt/.github/workflows/reporting-workflow.yaml@main
    with: 
      trivy-results: ${{needs.vuln-scan.outputs.trivy_results}}
